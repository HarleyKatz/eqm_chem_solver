import numpy as np

coll_ion_dict = {
    "oxygen": {
        "dE": np.array([ 13.6e0, 35.1e0, 54.9e0, 77.4e0, 113.9e0, 138.1e0, 739.3e0, 871.5e0 ]),
        "A": np.array([ 0.359e-7, 0.139e-7, 0.931e-8, 0.102e-7, 0.219e-8, 0.195e-8, 0.212e-9, 0.521e-10 ]),
        "X": np.array([ 0.073e0, 0.212e0, 0.270e0, 0.614e0, 0.630e0, 0.360e0, 0.396e0, 0.629e0 ]),
        "K": np.array([ 0.34e0, 0.22e0, 0.27e0, 0.27e0, 0.17e0, 0.54e0, 0.35e0, 0.16e0 ]),
        "P": np.array([ 0., 1., 1., 0., 1., 0., 0., 1. ])
    },
    "nitrogen": {
        "dE": np.array([ 14.5e0, 29.6e0, 47.5e0, 77.5e0, 97.9e0, 552.1e0, 667.0e0 ]),
        "A": np.array([ 0.482e-7, 0.298e-7, 0.810e-8, 0.371e-8, 0.151e-8, 0.371e-9, 0.777e-10 ]),
        "X": np.array([ 0.0652e0, 0.310e0, 0.350e0, 0.549e0, 0.0167e0, 0.546e0, 0.624e0 ]),
        "K": np.array([ 0.42e0, 0.30e0, 0.24e0, 0.18e0, 0.74e0, 0.29e0, 0.16e0 ]),
        "P": np.array([ 0., 0., 1., 1., 0., 0., 1. ]),
    },
    "carbon": {
        "dE": np.array([ 11.3e0, 24.4e0, 47.9e0, 64.5e0, 392.1e0, 490.0e0 ]),
        "A": np.array([ 0.685e-7, 0.186e-7, 0.635e-8, 0.150e-8, 0.299e-9, 0.123e-9 ]),
        "X": np.array([ 0.193e0, 0.286e0, 0.427e0, 0.416e0, 0.666e0, 0.620e0 ]),
        "K": np.array([ 0.25e0, 0.24e0, 0.21e0, 0.13e0, 0.02e0, 0.16e0 ]),
        "P": np.array([ 0., 1., 1., 1., 1., 1. ]),
    },
    "neon": {
        "dE": np.array([ 21.6e0, 41.0e0, 63.5e0, 97.1e0, 126.2e0, 
            157.9e0, 207.3e0, 239.1e0, 1196.0e0, 1360.6e0 ]),
        "A": np.array([ 0.150e-7, 0.198e-7, 0.703e-8, 0.424e-8, 0.279e-8, 
            0.345e-8, 0.956e-9, 0.473e-9, 0.392e-10, 0.277e-10 ]),
        "X": np.array([ 0.0329e0, 0.295e0, 0.0677e0, 0.0482e0, 0.305e0, 
            0.581e0, 0.749e0, 0.992e0, 0.262e0, 0.661e0 ]),
        "K": np.array([ 0.43e0, 0.20e0, 0.39e0, 0.58e0, 0.25e0, 
            0.28e0, 0.14e0, 0.04e0, 0.20e0, 0.13e0 ]),
        "P": np.array([ 1., 0., 1., 1., 1., 0., 1., 1., 1., 1. ]),
    },
    "magnesium": {
        "dE": np.array([ 7.6e0, 15.2e0, 80.1e0, 109.3e0, 141.3e0, 186.5e0, 224.9e0, 
            266.0e0, 328.2e0, 367.5e0, 1761.8e0, 1962.7e0 ]),
        "A": np.array([ 0.621e-6, 0.192e-7, 0.556e-8, 0.435e-8, 0.710e-8, 0.170e-8, 
            0.122e-8, 0.220e-8, 0.486e-9, 0.235e-9, 0.206e-10, 0.175e-10 ]),
        "X": np.array([ 0.592e0, 0.0027e0, 0.107e0, 0.159e0, 0.658e0, 0.242e0, 0.343e0, 
            0.897e0, 0.751e0, 1.030e0, 0.196e0, 0.835e0 ]),
        "K": np.array([ 0.39e0, 0.85e0, 0.30e0, 0.31e0, 0.25e0, 0.28e0, 0.23e0, 0.22e0, 
            0.14e0, 0.10e0, 0.25e0, 0.11e0 ]),
        "P": np.array([ 0., 0., 1., 1., 0., 1., 1., 0., 1., 1., 1., 1. ]),
    },
    "silicon": {
        "dE": np.array([ 8.2e0, 16.4e0, 33.5e0, 54.0e0, 166.8e0, 205.3e0, 246.5e0,  
            303.5e0, 351.1e0, 401.4e0, 476.4e0, 523.5e0, 2437.7e0, 2673.2e0 ]),
        "A": np.array([ 0.188e-6, 0.643e-7, 0.201e-7, 0.494e-8, 0.176e-8, 0.174e-8, 0.123e-8,  
            0.827e-9, 0.601e-9, 0.465e-9, 0.263e-9, 0.118e-9, 0.336e-10, 0.119e-10 ]),
        "X": np.array([ 0.376e0, 0.632e0, 0.473e0, 0.172e0, 0.102e0, 0.180e0, 0.518e0, 
            0.239e0, 0.305e0, 0.666e0, 0.666e0, 0.734e0, 0.336e0, 0.989e0 ]),
        "K": np.array([ 0.25e0, 0.20e0, 0.22e0, 0.23e0, 0.31e0, 0.29e0, 0.07e0, 
            0.28e0, 0.25e0, 0.04e0, 0.16e0, 0.16e0, 0.37e0, 0.08e0 ]),
        "P": np.array([ 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 1. ]),
    },
    "sulfur": {
        "dE": np.array([ 10.4e0, 23.3e0, 34.8e0, 47.3e0, 72.6e0, 88.1e0, 280.9e0, 328.2e0,  
            379.1e0, 447.1e0, 504.8e0, 564.7e0, 651.6e0, 707.2e0, 3223.9e0, 3494.2e0 ]),
        "A": np.array([ 0.549e-7, 0.681e-7, 0.214e-7, 0.166e-7, 0.612e-8, 0.133e-8, 0.493e-8, 0.873e-9, 
            0.135e-8, 0.459e-9, 0.349e-9, 0.523e-9, 0.259e-9, 0.750e-10, 0.267e-10, 0.632e-11 ]),
        "X": np.array([ 0.100e0, 0.693e0, 0.353e0, 1.030e0, 0.580e0, 0.0688e0, 1.130e0, 0.193e0, 
            0.431e0, 0.242e0, 0.305e0, 0.428e0, 0.854e0, 0.734e0, 0.572e0, 0.585e0 ]),
        "K": np.array([ 0.25e0, 0.21e0, 0.24e0, 0.14e0, 0.19e0, 0.35e0, 0.16e0, 0.28e0, 0.32e0, 0.28e0,  
            0.25e0, 0.35e0, 0.12e0, 0.16e0, 0.28e0, 0.17e0 ]),
        "P": np.array([ 1., 1., 1., 1., 1., 1., 0., 1., 0., 1., 1., 0., 0., 1., 0., 1. ]),
    },
    "iron": {
        "dE": np.array([ 7.9e0, 16.2e0, 30.6e0, 54.8e0, 75.0e0, 99.0e0, 125.0e0, 151.1e0,  
            233.6e0, 262.1e0, 290.0e0, 331.0e0, 361.0e0, 392.0e0, 457.0e0, 
            489.3e0, 1262.0e0, 1360.0e0, 1470.0e0, 1582.0e0, 1690.0e0, 1800.0e0, 
            1960.0e0, 2046.0e0, 8828.0e0, 9277.7e0 ]),
        "A": np.array([ 0.252e-6, 0.221e-7, 0.410e-7, 0.353e-7, 0.104e-7, 0.123e-7, 0.947e-8, 
            0.471e-8, 0.302e-8, 0.234e-8, 0.176e-8, 0.114e-8, 0.866e-9, 0.661e-9, 
            0.441e-9, 0.118e-9, 0.361e-9, 0.245e-9, 0.187e-9, 0.133e-9, 0.784e-10, 
            0.890e-10, 0.229e-10, 0.112e-10, 0.246e-11, 0.979e-12 ]),
        "X": np.array([ 0.701e0, 0.033e0, 0.366e0, 0.243e0, 0.285e0, 0.411e0, 0.458e0, 0.280e0, 
            0.697e0, 0.764e0, 0.805e0, 0.773e0, 0.805e0, 0.762e0, 0.698e0, 0.211e0, 
            1.160e0, 0.978e0, 0.988e0, 1.030e0, 0.848e0, 1.200e0, 0.936e0, 0.034e0, 
            1.020e0, 0.664e0 ]),
        "K": np.array([ 0.25e0, 0.45e0, 0.17e0, 0.39e0, 0.17e0, 0.21e0, 0.21e0, 0.28e0, 0.15e0,  
            0.14e0, 0.14e0, 0.15e0, 0.14e0, 0.14e0, 0.16e0, 0.15e0, 0.09e0, 0.13e0, 
            0.14e0, 0.12e0, 0.14e0, 0.35e0, 0.12e0, 0.81e0, 0.02e0, 0.14e0 ]),
        "P": np.array([ 0., 1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
            1., 1., 1., 1., 0., 1., 0., 1., 1. ]),
    },
}

def coll_ion(T,N,dE,A,X,K,P):
    # Eqn 1 / voronov 1997
    U = dE[N] / (T * 8.61732814974056e-05) #! K --> eV
    return A[N] * (1. + P[N] * np.sqrt(U)) * (U**K[N]) * np.exp(-U) / (X[N] + U)

def coll_ion_generic(T,N,element):

    if element in ["hydrogen","helium"]:
        if element == "hydrogen":
            return coll_ion_hydrogen(T,N)
        elif element == "helium":
            return coll_ion_helium(T,N)
    else:
        dE = coll_ion_dict[element]["dE"]
        A  = coll_ion_dict[element]["A"]
        X  = coll_ion_dict[element]["X"]
        K  = coll_ion_dict[element]["K"]
        P  = coll_ion_dict[element]["P"]
        return coll_ion(T,N,dE,A,X,K,P)

    return 0.0

def coll_ion_hydrogen(T,N):
    #! Collisional ionization rate [cm3 s-1] of HI (Maselli&'03)-------------
    T5 = T / 1e5
    f = 1.0 + np.sqrt(T5) 
    hf = 0.5 / f
    return  5.85e-11 * (np.sqrt(T) / f) * np.exp(-157809.1/T)

def coll_ion_helium(T,N):
    T5 = T / 1e5
    f = 1.0 + np.sqrt(T5)
    if N == 0:
        #! Collisional ionization rate [cm3 s-1] of HeI (Maselli&'03)------------
        return 2.38e-11 * (np.sqrt(T) / f) * np.exp(-285335.4/T)
    elif N == 1:
        #! Collisional ionization rate [cm3 s-1] of HeII (Maselli&'03)-----------
        return 5.68e-12 * (np.sqrt(T) / f) * np.exp(-631515.0/T)
    return 0.0

