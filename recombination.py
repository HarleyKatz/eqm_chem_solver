import numpy as np

###
### Oxygen
###
###Radiative recombination rates
RR_rates_oxygen = np.zeros((9,6))
RR_rates_oxygen[8,:]  = np.array([ 6.552E-10, 0.7470E0, 1.951E2,   4.483E7, 0.0000E0, 0.000E0 ])
RR_rates_oxygen[7,:]  = np.array([ 2.652E-10, 0.6705E0, 5.842E2,   4.559E7, 0.0000E0, 0.000E0 ])
RR_rates_oxygen[6,:]  = np.array([ 8.193E-11, 0.5165E0, 2.392E3,   2.487E7, 0.0000E0, 0.000E0 ])
RR_rates_oxygen[5,:]  = np.array([ 1.724E-10, 0.6556E0, 3.372E2,   1.030E7, 0.0000E0, 0.000E0 ])
RR_rates_oxygen[4,:]  = np.array([ 3.955E-09, 0.7813E0, 6.821E-01, 5.076E6, 0.0000E0, 0.000E0 ])
RR_rates_oxygen[3,:]  = np.array([ 2.501E-09, 0.7844E0, 5.235E-01, 4.470E6, 0.0447E0, 1.642E5 ])
RR_rates_oxygen[2,:]  = np.array([ 2.096E-09, 0.7668E0, 1.602E-01, 4.377E6, 0.1070E0, 1.392E5 ])
RR_rates_oxygen[1,:]  = np.array([ 6.622E-11, 0.6109E0, 4.136E0,   4.214E6, 0.4093E0, 8.770E4 ])

###Dielectronic recombination rates
DR_rates_c_oxygen = np.zeros((9,9))
DR_rates_c_oxygen[8,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_oxygen[7,:]   = np.array([ 4.925E-03, 5.837E-02, 1.359E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_oxygen[6,:]   = np.array([ 6.135E-02, 1.968E-04, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_oxygen[5,:]   = np.array([ 2.389E-05, 1.355E-04, 5.885E-03, 2.163E-03, 6.341E-04, 1.348E-02, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_oxygen[4,:]   = np.array([ 1.615E-05, 9.299E-06, 1.530E-04, 6.616E-04, 1.080E-02, 7.503E-04, 2.892E-03, 0.000E+00, 0.000E+00 ])
DR_rates_c_oxygen[3,:]   = np.array([ 3.932E-07, 2.523E-07, 3.447E-05, 5.776E-03, 5.101E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_oxygen[2,:]   = np.array([ 1.627E-07, 1.262E-07, 6.663E-07, 3.925E-06, 2.406E-03, 1.146E-03, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_oxygen[1,:]   = np.array([ 5.629E-08, 2.550E-07, 6.173E-04, 1.627E-04, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])

DR_rates_e_oxygen = np.zeros((9,9))
DR_rates_e_oxygen[8,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_oxygen[7,:]   = np.array([ 5.440E+06, 7.170E+06, 1.152E+07, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_oxygen[6,:]   = np.array([ 6.113E+06, 3.656E+07, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_oxygen[5,:]   = np.array([ 2.326E+04, 3.209E+04, 1.316E+05, 6.731E+05, 1.892E+06, 6.150E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_oxygen[4,:]   = np.array([ 7.569E+02, 3.659E+03, 1.984E+04, 8.429E+04, 2.294E+05, 1.161E+06, 6.137E+06, 0.000E+00, 0.000E+00 ])
DR_rates_e_oxygen[3,:]   = np.array([ 1.509E+02, 6.211E+02, 1.562E+04, 1.936E+05, 4.700E+05, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_oxygen[2,:]   = np.array([ 4.535E+01, 2.847E+02, 4.166E+03, 2.877E+04, 1.953E+05, 3.646E+05, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_oxygen[1,:]   = np.array([ 5.395E+03, 1.770E+04, 1.671E+05, 2.687E+05, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])

###
### Nitrogen
###
###Radiative recombination rates
RR_rates_nitrogen = np.zeros((8,6))
RR_rates_nitrogen[7,:]  = np.array([ 6.170E-10, 0.7481E0, 1.316E2,   3.427E7, 0.0000E0, 0.000E0 ])
RR_rates_nitrogen[6,:]  = np.array([ 2.388E-10, 0.6732E0, 3.960E2,   3.583E7, 0.0000E0, 0.000E0 ])
RR_rates_nitrogen[5,:]  = np.array([ 6.245E-11, 0.4985E0, 1.957E3,   2.177E7, 0.0000E0, 0.000E0 ])
RR_rates_nitrogen[4,:]  = np.array([ 1.533E-10, 0.6682E0, 1.823E2,   7.751E6, 0.0000E0, 0.000E0 ])
RR_rates_nitrogen[3,:]  = np.array([ 7.923E-10, 0.7768E0, 3.750E0,   3.468E6, 0.0223E0, 7.206E4 ])
RR_rates_nitrogen[2,:]  = np.array([ 2.410E-09, 0.7948E0, 1.231E-01, 3.016E6, 0.0774E0, 1.016E5 ])
RR_rates_nitrogen[1,:]  = np.array([ 6.387E-10, 0.7308E0, 9.467E-02, 2.954E6, 0.2440E0, 6.739E4 ])

###Dielectronic recombination rates
DR_rates_c_nitrogen = np.zeros((8,9))
DR_rates_c_nitrogen[7,:]   = np.array([ 0.000E+00, 0.000E+00,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_nitrogen[6,:]   = np.array([ 2.801E-03, 4.362E-02,  1.117E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_nitrogen[5,:]   = np.array([ 5.761E-03, 3.434E-02, -1.660E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_nitrogen[4,:]   = np.array([ 2.040E-06, 6.986E-05,  3.168E-04, 4.353E-03, 7.765E-04, 5.101E-03, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_nitrogen[3,:]   = np.array([ 3.386E-06, 3.036E-05,  5.945E-05, 1.195E-03, 6.462E-03, 1.358E-03, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_nitrogen[2,:]   = np.array([ 7.712E-08, 4.839E-08,  2.218E-06, 1.536E-03, 3.647E-03, 4.234E-05, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_nitrogen[1,:]   = np.array([ 1.658E-08, 2.760E-08,  2.391E-09, 7.585E-07, 3.012E-04, 7.132E-04, 0.000E+00, 0.000E+00, 0.000E+00 ])

DR_rates_e_nitrogen = np.zeros((8,9))
DR_rates_e_nitrogen[7,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_nitrogen[6,:]   = np.array([ 4.198E+06, 5.516E+06, 8.050E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_nitrogen[5,:]   = np.array([ 3.860E+06, 4.883E+06, 6.259E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_nitrogen[4,:]   = np.array([ 3.084E+03, 1.332E+04, 6.475E+04, 1.181E+05, 6.687E+05, 4.778E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_nitrogen[3,:]   = np.array([ 1.406E+03, 6.965E+03, 2.604E+04, 1.304E+05, 1.965E+05, 4.466E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_nitrogen[2,:]   = np.array([ 7.113E+01, 2.765E+02, 1.439E+04, 1.347E+05, 2.496E+05, 2.204E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_nitrogen[1,:]   = np.array([ 1.265E+01, 8.425E+01, 2.964E+02, 5.923E+03, 1.278E+05, 2.184E+05, 0.000E+00, 0.000E+00, 0.000E+00 ])

###
### Carbon
###
###Radiative recombination rates
RR_rates_carbon = np.zeros((7,6))
RR_rates_carbon[6,:]  = np.array([ 5.337E-10, 0.7485E0, 9.502E1,   2.517E7, 0.0000E0, 0.000E0 ])
RR_rates_carbon[5,:]  = np.array([ 2.044E-10, 0.6742E0, 2.647E2,   2.773E7, 0.0000E0, 0.000E0 ])
RR_rates_carbon[4,:]  = np.array([ 4.798E-11, 0.4834E0, 1.355E3,   1.872E7, 0.0000E0, 0.000E0 ])
RR_rates_carbon[3,:]  = np.array([ 1.120E-10, 0.6737E0, 1.115E2,   5.938E6, 0.0000E0, 0.000E0 ])
RR_rates_carbon[2,:]  = np.array([ 2.067E-09, 0.8012E0, 1.643E-01, 2.172E6, 0.0427E0, 6.341E4 ])
RR_rates_carbon[1,:]  = np.array([ 2.995E-09, 0.7849E0, 6.670E-03, 1.943E6, 0.1597E0, 4.955E4 ])

###Dielectronic recombination rates
DR_rates_c_carbon = np.zeros((7,9))
DR_rates_c_carbon[6,:]   = np.array([ 0.000E+00, 0.000E+00,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_carbon[5,:]   = np.array([ 1.426E-03, 3.046E-02,  8.373E-04, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_carbon[4,:]   = np.array([ 2.646E-03, 1.762E-02, -7.843E-04, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_carbon[3,:]   = np.array([ 4.673E-07, 1.887E-05,  1.305E-05, 3.099E-03, 3.001E-04, 2.553E-03, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_carbon[2,:]   = np.array([ 3.489E-06, 2.222E-07,  1.954E-05, 4.212E-03, 2.037E-04, 2.936E-04, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_carbon[1,:]   = np.array([ 6.346E-09, 9.793E-09,  1.634E-06, 8.369E-04, 3.355E-04, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])

DR_rates_e_carbon = np.zeros((7,9))
DR_rates_e_carbon[6,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_carbon[5,:]   = np.array([ 3.116E+06, 4.075E+06, 5.749E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_carbon[4,:]   = np.array([ 2.804E+06, 3.485E+06, 4.324E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_carbon[3,:]   = np.array([ 7.233E+02, 2.847E+03, 1.054E+04, 8.915E+04, 2.812E+05, 3.254E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_carbon[2,:]   = np.array([ 2.660E+03, 3.756E+03, 2.566E+04, 1.400E+05, 1.801E+06, 4.307E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_carbon[1,:]   = np.array([ 1.217E+01, 7.380E+01, 1.523E+04, 1.207E+05, 2.144E+05, 3.254E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])

###
### Magnesium
###
###Radiative recombination rates
RR_rates_magnesium = np.zeros((13,6))
RR_rates_magnesium[12,:]  = np.array([ 1.022E-09, 0.7476E0, 4.098E2, 1.011E8, 0.0000E0, 0.000E0 ])
RR_rates_magnesium[11,:]  = np.array([ 4.214E-10, 0.6713E0, 1.396E3, 9.433E7, 0.0000E0, 0.000E0 ])
RR_rates_magnesium[10,:]  = np.array([ 1.602E-10, 0.5492E0, 4.944E3, 4.434E7, 0.0000E0, 0.000E0 ])
RR_rates_magnesium[9,:]  = np.array([ 3.445E-10, 0.6553E0, 8.693E2, 2.196E7, 0.0000E0, 0.000E0 ])
RR_rates_magnesium[8,:]  = np.array([ 3.989E-10, 1.0231E0, 2.601E1, 1.227E7, 0.0000E0, 0.000E0 ])
RR_rates_magnesium[7,:]  = np.array([ 3.859E-09, 0.7579E0, 5.587E0, 1.235E7, 0.0000E0, 0.000E0 ])
RR_rates_magnesium[6,:]  = np.array([ 9.133E-10, 0.7353E0, 3.674E1, 1.263E7, 0.0211E0, 4.049E5 ])
RR_rates_magnesium[5,:]  = np.array([ 7.515E-10, 0.7203E0, 2.582E1, 1.355E7, 0.0436E0, 5.691E5 ])
RR_rates_magnesium[4,:]  = np.array([ 4.031E-10, 0.6803E0, 3.205E1, 1.626E7, 0.0764E0, 5.399E5 ])
RR_rates_magnesium[3,:]  = np.array([ 1.249E-10, 0.5600E0, 7.748E1, 2.015E7, 0.1917E0, 5.139E5 ])
RR_rates_magnesium[2,:] = np.array([ 1.345E-11, 0.1074E0, 7.877E2, 7.925E7, 0.4631E0, 5.027E5 ])
RR_rates_magnesium[1,:] = np.array([ 5.452E-11, 0.6845E0, 5.637E0, 1.551E6, 0.3945E0, 8.360E5 ])

###Dielectronic recombination rates
DR_rates_c_magnesium = np.zeros((13,9))
DR_rates_c_magnesium[12,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[11,:]   = np.array([ 2.262E-02, 1.216E-01, 2.531E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[10,:]   = np.array([ 3.067E-02, 1.375E-01, 1.347E-02, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[9,:]   = np.array([ 2.582E-04, 5.033E-04, 4.561E-03, 8.754E-03, 2.734E-02, 7.509E-02, 1.385E-02, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[8,:]   = np.array([ 3.565E-05, 2.017E-05, 1.165E-03, 5.016E-03, 2.434E-02, 2.508E-02, 2.475E-02, 7.087E-04, 0.000E+00 ])
DR_rates_c_magnesium[7,:]   = np.array([ 5.451E-05, 6.999E-05, 3.928E-04, 7.483E-04, 1.851E-02, 1.190E-02, 4.764E-02, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[6,:]   = np.array([ 2.931E-05, 5.192E-05, 1.769E-04, 7.988E-04, 1.488E-02, 4.546E-02, 1.505E-04, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[5,:]   = np.array([ 2.407E-05, 1.187E-04, 3.845E-04, 1.333E-02, 2.804E-02, 8.746E-04, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[4,:]   = np.array([ 2.574E-06, 2.001E-06, 1.829E-05, 2.362E-05, 6.413E-03, 4.118E-03, 7.224E-03, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[3,:]   = np.array([ 9.400E-08, 3.818E-07, 2.064E-07, 2.710E-05, 3.802E-03, 3.086E-03, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[2,:]  = np.array([ 6.269E-06, 9.181E-04, 3.082E-04, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_magnesium[1,:]  = np.array([ 3.871E-08, 4.732E-07, 1.599E-03, 2.628E-05, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])

DR_rates_e_magnesium = np.zeros((13,9))
DR_rates_e_magnesium[12,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[11,:]   = np.array([ 1.201E+07, 1.588E+07, 2.473E+07, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[10,:]   = np.array([ 1.136E+07, 1.431E+07, 1.762E+07, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[9,:]   = np.array([ 2.861E+04, 4.087E+04, 1.528E+05, 2.677E+05, 2.055E+06, 1.298E+07, 1.852E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[8,:]   = np.array([ 1.759E+03, 1.237E+04, 5.651E+04, 1.680E+05, 4.007E+05, 1.991E+06, 1.330E+07, 4.060E+07, 0.000E+00 ])
DR_rates_e_magnesium[7,:]   = np.array([ 2.196E+02, 4.524E+03, 2.491E+04, 9.111E+04, 3.367E+05, 8.316E+05, 1.817E+06, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[6,:]   = np.array([ 7.667E+02, 3.444E+03, 2.409E+04, 1.190E+05, 3.999E+05, 1.502E+06, 2.464E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[5,:]   = np.array([ 8.061E+03, 2.154E+04, 6.640E+04, 3.406E+05, 1.327E+06, 3.347E+06, 1.852E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[4,:]   = np.array([ 1.129E+02, 1.585E+03, 1.193E+04, 4.151E+04, 3.684E+05, 6.925E+05, 1.150E+06, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[3,:]   = np.array([ 2.660E+02, 1.141E+03, 3.210E+03, 1.727E+05, 4.523E+05, 9.105E+05, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[2,:]  = np.array([ 4.104E+05, 5.766E+05, 7.310E+05, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_magnesium[1,:]  = np.array([ 8.415E+03, 1.682E+04, 5.000E+04, 2.759E+05, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])

###
### Silicon
###
###Radiative recombination rates
RR_rates_silicon = np.zeros((15,6))
RR_rates_silicon[14,:]  = np.array([ 1.261E-09, 0.7488E+00, 5.068E+02, 1.365E+08, 0.0000E+00, 0.000E+00 ])
RR_rates_silicon[13,:]  = np.array([ 4.870E-10, 0.6697E+00, 2.026E+03, 1.265E+08, 0.0000E+00, 0.000E+00 ])
RR_rates_silicon[12,:]  = np.array([ 2.017E-10, 0.5588E+00, 6.494E+03, 5.693E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_silicon[11,:]  = np.array([ 4.633E-10, 0.6602E+00, 1.088E+03, 2.896E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_silicon[10,:]  = np.array([ 1.851E-09, 0.7384E+00, 6.906E+01, 1.644E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_silicon[9,:]   = np.array([ 1.688E-09, 0.7390E+00, 5.549E+01, 1.716E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_silicon[8,:]   = np.array([ 2.100E-09, 0.7401E+00, 2.523E+01, 1.842E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_silicon[7,:]   = np.array([ 7.532E-10, 0.7072E+00, 8.860E+01, 1.997E+07, 0.0185E+00, 6.949E+05 ])
RR_rates_silicon[6,:]   = np.array([ 4.615E-10, 0.6753E+00, 1.143E+02, 2.377E+07, 0.0356E+00, 8.595E+05 ])
RR_rates_silicon[5,:]   = np.array([ 2.468E-10, 0.6113E+00, 1.649E+02, 3.231E+07, 0.0636E+00, 9.837E+05 ])
RR_rates_silicon[4,:]   = np.array([ 5.134E-11, 0.3678E+00, 1.009E+03, 8.514E+07, 0.1646E+00, 1.084E+06 ])
RR_rates_silicon[3,:]   = np.array([ 6.739E-11, 0.4931E+00, 2.166E+02, 4.491E+07, 0.1667E+00, 9.046E+05 ])
RR_rates_silicon[2,:]   = np.array([ 1.964E-10, 0.6287E+00, 7.712E+00, 2.951E+07, 0.1523E+00, 4.804E+05 ])
RR_rates_silicon[1,:]   = np.array([ 3.262E-11, 0.6270E+00, 1.590E+01, 4.237E+07, 0.2333E+00, 5.828E+04 ])

###Dielectronic recombination rates
DR_rates_c_silicon = np.zeros((15,9))
DR_rates_c_silicon[14,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[13,:]   = np.array([ 3.846E-02, 1.491E-01, 2.779E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[12,:]   = np.array([ 5.318E-02, 1.874E-01, 1.227E-02, 7.173E-04, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[11,:]   = np.array([ 1.205E-03, 1.309E-02, 5.333E-03, 2.858E-02, 3.195E-02, 1.433E-01, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[10,:]   = np.array([ 2.214E-04, 1.260E-03, 3.832E-03, 1.158E-02, 2.871E-02, 5.456E-02, 5.035E-02, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[9,:]    = np.array([ 1.246E-04, 6.649E-04, 2.912E-03, 2.912E-02, 3.049E-02, 1.056E-01, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[8,:]    = np.array([ 5.845E-04, 6.600E-04, 7.180E-04, 1.714E-02, 2.958E-02, 1.075E-01, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[7,:]    = np.array([ 5.272E-05, 2.282E-04, 1.345E-03, 2.246E-02, 9.606E-02, 8.366E-04, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[6,:]    = np.array([ 2.086E-06, 9.423E-06, 3.423E-05, 3.950E-04, 1.535E-02, 4.986E-02, 4.067E-04, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[5,:]    = np.array([ 7.163E-07, 2.656E-06, 1.119E-06, 4.796E-05, 4.052E-03, 6.101E-03, 2.366E-02, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[4,:]    = np.array([ 1.422E-04, 9.474E-03, 1.650E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[3,:]    = np.array([ 3.819E-06, 2.421E-05, 2.283E-04, 8.604E-03, 2.617E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[2,:]    = np.array([ 2.930E-06, 2.803E-06, 9.023E-05, 6.909E-03, 2.582E-05, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_silicon[1,:]    = np.array([ 3.408E-08, 1.913E-07, 1.679E-07, 7.523E-07, 8.386E-05, 4.083E-03, 0.000E+00, 0.000E+00, 0.000E+00 ])

DR_rates_e_silicon = np.zeros((15,9))
DR_rates_e_silicon[14,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[13,:]   = np.array([ 1.627E+07, 2.154E+07, 3.827E+07, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[12,:]   = np.array([ 1.552E+07, 1.969E+07, 2.532E+07, 2.696E+08, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[11,:]   = np.array([ 4.824E+04, 2.137E+05, 5.492E+05, 2.460E+06, 3.647E+06, 1.889E+07, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[10,:]   = np.array([ 3.586E+03, 1.324E+04, 5.636E+04, 2.498E+05, 5.363E+05, 2.809E+06, 1.854E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[9,:]    = np.array([ 1.167E+03, 9.088E+03, 5.332E+04, 4.219E+05, 1.571E+06, 2.721E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[8,:]    = np.array([ 9.856E+02, 6.577E+03, 4.281E+04, 3.944E+05, 1.296E+06, 2.441E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[7,:]    = np.array([ 2.829E+03, 2.617E+04, 1.374E+05, 4.520E+05, 2.072E+06, 7.808E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[6,:]    = np.array([ 3.708E+02, 3.870E+03, 2.226E+04, 1.318E+05, 5.285E+05, 1.742E+06, 8.392E+06, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[5,:]    = np.array([ 5.625E+02, 2.952E+03, 9.682E+03, 1.473E+05, 5.064E+05, 8.047E+05, 1.623E+06, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[4,:]    = np.array([ 7.685E+05, 1.208E+06, 1.839E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[3,:]    = np.array([ 3.802E+03, 1.280E+04, 5.953E+04, 1.026E+05, 1.154E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[2,:]    = np.array([ 1.162E+02, 5.721E+03, 3.477E+04, 1.176E+05, 3.505E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_silicon[1,:]    = np.array([ 2.431E+01, 1.293E+02, 4.272E+02, 3.729E+03, 5.514E+04, 1.295E+05, 0.000E+00, 0.000E+00, 0.000E+00 ])

###
### Sulfur
###
###Radiative recombination rates
RR_rates_sulfur = np.zeros((17,6))
RR_rates_sulfur[16,:]  = np.array([ 1.432E-09, 0.7485E+00, 6.688E+02, 1.793E+08, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[15,:]  = np.array([ 5.546E-10, 0.6692E+00, 2.754E+03, 1.633E+08, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[14,:]  = np.array([ 2.362E-10, 0.5615E+00, 8.776E+03, 7.208E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[13,:]  = np.array([ 5.511E-10, 0.6598E+00, 1.492E+03, 3.755E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[12,:]  = np.array([ 1.740E-09, 0.7303E+00, 1.494E+02, 2.193E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[11,:]  = np.array([ 1.702E-09, 0.7301E+00, 1.138E+02, 2.253E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[10,:]  = np.array([ 1.518E-09, 0.7246E+00, 9.845E+01, 2.390E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[9,:]  = np.array([ 1.137E-09, 0.7080E+00, 1.099E+02, 2.745E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[8,:]  = np.array([ 8.773E-10, 0.6853E+00, 1.115E+02, 3.386E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_sulfur[7,:]  = np.array([ 3.384E-10, 0.6175E+00, 3.380E+02, 4.347E+07, 0.0225E+00, 1.672E+06 ])
RR_rates_sulfur[6,:] = np.array([ 9.565E-11, 0.4517E+00, 1.599E+03, 9.252E+07, 0.0612E+00, 1.986E+06 ])
RR_rates_sulfur[5,:] = np.array([ 1.588E-10, 0.5584E+00, 3.350E+02, 5.188E+07, 0.0591E+00, 1.656E+06 ])
RR_rates_sulfur[4,:] = np.array([ 2.615E-10, 0.6343E+00, 6.238E+01, 2.803E+07, 0.0773E+00, 1.059E+06 ])
RR_rates_sulfur[3,:] = np.array([ 3.043E-10, 0.6947E+00, 1.678E+01, 2.050E+07, 0.0795E+00, 6.868E+04 ])
RR_rates_sulfur[2,:] = np.array([ 2.478E-11, 0.4642E+00, 3.294E+02, 2.166E+07, 0.3351E+00, 7.630E+05 ])

###Dielectronic recombination rates
DR_rates_c_sulfur = np.zeros((17,9))
DR_rates_c_sulfur[16,:]   = np.array([ 0.000E+00, 0.000E+00,  0.000E+00, 0.000E+00,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[15,:]   = np.array([ 6.659E-02, 1.762E-01, -6.522E-03, 0.000E+00,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[14,:]   = np.array([ 8.410E-02, 2.381E-01,  1.065E-02, 1.049E-03,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[13,:]   = np.array([ 1.173E-03, 1.718E-03,  1.657E-02, 7.474E-03,  9.698E-02, 1.399E-01, 7.029E-02, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[12,:]   = np.array([ 2.610E-04, 9.442E-04,  8.190E-03, 4.271E-02,  1.997E-02, 9.590E-02, 8.444E-02, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[11,:]   = np.array([ 9.126E-05, 1.691E-04,  3.050E-03, 2.604E-02,  3.245E-02, 2.511E-01, 4.459E-04, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[10,:]   = np.array([ 1.371E-04, 3.096E-04,  1.782E-03, 1.278E-02,  3.323E-02, 2.593E-01, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[9,:]   = np.array([ 1.830E-04, 1.551E-03,  1.717E-03, 2.798E-02,  6.933E-02, 1.727E-01, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[8,:]   = np.array([ 2.924E-05, 3.366E-04,  2.104E-04, 1.910E-02, -4.017E-04, 6.541E-02, 9.546E-02, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[7,:]   = np.array([ 2.585E-06, 9.517E-06,  5.194E-06, 3.715E-04,  1.553E-02, 1.013E-01, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[6,:]  = np.array([ 3.931E-05, 4.431E-03,  5.156E-02, 0.000E+00,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[5,:]  = np.array([ 2.816E-06, 3.172E-05,  1.832E-04, 4.360E-03,  1.618E-02, 7.707E-03, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[4,:]  = np.array([ 9.571E-06, 6.268E-05,  3.807E-04, 1.874E-02,  5.526E-03, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[3,:]  = np.array([ 5.817E-07, 1.391E-06,  1.123E-05, 1.521E-04,  1.875E-03, 2.097E-02, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_sulfur[2,:]  = np.array([ 3.040E-07, 4.393E-07,  1.609E-06, 4.980E-06,  3.457E-05, 8.617E-03, 9.284E-04, 0.000E+00, 0.000E+00 ])

DR_rates_e_sulfur = np.zeros((17,9))
DR_rates_e_sulfur[16,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[15,:]   = np.array([ 2.122E+07, 2.897E+07, 5.786E+07, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[14,:]   = np.array([ 2.032E+07, 2.592E+07, 3.206E+07, 2.016E+08, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[13,:]   = np.array([ 1.366E+04, 6.371E+04, 2.540E+05, 6.493E+05, 3.868E+06, 2.186E+07, 2.983E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[12,:]   = np.array([ 5.114E+03, 1.750E+04, 1.061E+05, 4.691E+05, 1.821E+06, 4.033E+06, 2.476E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[11,:]   = np.array([ 3.575E+03, 1.491E+04, 9.388E+04, 3.856E+05, 9.630E+05, 3.490E+06, 1.743E+08, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[10,:]   = np.array([ 1.505E+03, 1.100E+04, 6.720E+04, 3.364E+05, 9.686E+05, 3.195E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[9,:]   = np.array([ 1.122E+04, 3.121E+04, 9.348E+04, 4.792E+05, 2.052E+06, 3.291E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[8,:]   = np.array([ 7.192E+02, 7.490E+03, 4.510E+04, 5.586E+05, 3.830E+05, 1.976E+06, 2.894E+06, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[7,:]   = np.array([ 1.277E+03, 5.978E+03, 2.097E+04, 2.292E+05, 7.974E+05, 2.376E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[6,:]  = np.array([ 9.455E+05, 1.365E+06, 2.169E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[5,:]  = np.array([ 7.590E+03, 1.558E+04, 4.013E+04, 1.156E+05, 1.601E+05, 1.839E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[4,:]  = np.array([ 1.180E+03, 6.443E+03, 2.264E+04, 1.530E+05, 3.564E+05, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[3,:]  = np.array([ 3.628E+02, 1.058E+03, 7.160E+03, 3.260E+04, 1.235E+05, 2.070E+05, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_sulfur[2,:]  = np.array([ 5.016E+01, 3.266E+02, 3.102E+03, 1.210E+04, 4.969E+04, 2.010E+05, 2.575E+05, 0.000E+00, 0.000E+00 ])

###radiative recombination data from https://www.pa.uky.edu/~verner/rec.html
RR_rates_alt_sulfur = np.zeros((17,2))
RR_rates_alt_sulfur[1,:] = np.array([ 4.10E-13, 0.630E+00 ]) #SII --> SI
RR_rates_alt_sulfur[2,:] = np.array([ 1.80E-12, 0.686E+00 ]) #SIII --> SII
RR_rates_alt_sulfur[3,:] = np.array([ 2.70E-12, 0.745E+00 ]) #SIV --> SIII
RR_rates_alt_sulfur[4,:] = np.array([ 5.70E-12, 0.755E+00 ]) #SV --> SIV
RR_rates_alt_sulfur[5,:] = np.array([ 1.20E-11, 0.701E+00 ]) #SVI --> SV
RR_rates_alt_sulfur[6,:] = np.array([ 1.70E-11, 0.849E+00 ]) #SVII --> SVI
RR_rates_alt_sulfur[7,:]  = np.array([ 2.70E-11, 0.733E+00 ]) #SVIII --> SVII
RR_rates_alt_sulfur[8,:]  = np.array([ 4.00E-11, 0.696E+00 ])  #SIX --> SVIII
RR_rates_alt_sulfur[9,:]  = np.array([ 5.50E-11, 0.711E+00 ])  #SX --> SIX
RR_rates_alt_sulfur[10,:]  = np.array([ 7.40E-11, 0.716E+00 ])  #SXI --> SX
RR_rates_alt_sulfur[11,:]  = np.array([ 9.20E-11, 0.714E+00 ])  #SXII --> SXI
RR_rates_alt_sulfur[12,:]  = np.array([ 1.40E-10, 0.755E+00 ])  #SXIII --> SXII
RR_rates_alt_sulfur[13,:]  = np.array([ 2.00E-10, 0.806E+00 ])  #SXIV --> SXIII
RR_rates_alt_sulfur[14,:]  = np.array([ 2.91E-10, 0.840E+00 ])  #SXV --> SXIV
RR_rates_alt_sulfur[15,:]  = np.array([ 4.30E-10, 0.807E+00 ])  #SXVI --> SXV
RR_rates_alt_sulfur[16,:]  = np.array([ 0.00E+00, 0.00E+00 ])   #SXVII --> SXVI

DR_rates_alt_sulfur = np.zeros((17,4))
DR_rates_alt_sulfur[1,:] = np.array([ 1.62E-03, 0.00E+00, 1.25E+05, 1.00E+05 ])
DR_rates_alt_sulfur[2,:] = np.array([ 1.09E-02, 1.20E-02, 1.92E+05, 1.80E+04 ])
DR_rates_alt_sulfur[3,:] = np.array([ 3.35E-02, 6.59E-02, 1.89E+05, 1.59E+05 ])
DR_rates_alt_sulfur[4,:] = np.array([ 3.14E-02, 6.89E-02, 1.68E+05, 8.04E+04 ])
DR_rates_alt_sulfur[5,:] = np.array([ 1.27E-02, 1.87E-01, 1.38E+05, 1.71E+05 ])
DR_rates_alt_sulfur[6,:] = np.array([ 1.47E-02, 1.29E-01, 1.80E+06, 1.75E+06 ])
DR_rates_alt_sulfur[7,:]  = np.array([ 1.34E-02, 1.04E+00, 6.90E+05, 2.15E+06 ])
DR_rates_alt_sulfur[8,:]  = np.array([ 2.38E-02, 1.12E+00, 5.84E+05, 2.59E+06 ])
DR_rates_alt_sulfur[9,:]  = np.array([ 3.19E-02, 1.40E+00, 5.17E+05, 2.91E+06 ])
DR_rates_alt_sulfur[10,:]  = np.array([ 7.13E-02, 1.00E+00, 6.66E+05, 2.32E+06 ])
DR_rates_alt_sulfur[11,:]  = np.array([ 8.00E-02, 5.55E-01, 6.00E+05, 2.41E+06 ])
DR_rates_alt_sulfur[12,:]  = np.array([ 7.96E-02, 1.63E+00, 5.09E+05, 6.37E+06 ])
DR_rates_alt_sulfur[13,:]  = np.array([ 1.34E-02, 3.04E-01, 2.91E+05, 1.04E+06 ])
DR_rates_alt_sulfur[14,:]  = np.array([ 4.02E-01, 2.98E-01, 2.41E+07, 4.67E+06 ])
DR_rates_alt_sulfur[15,:]  = np.array([ 1.45E-01, 2.81E-01, 2.54E+07, 5.30E+06 ])
DR_rates_alt_sulfur[16,:]  = np.array([ 0.00E+00, 0.00E+00, 0.00E+00, 0.00E+00 ])

###
### Iron
###
###Radiative recombination rates
RR_rates_iron = np.zeros((27,6))
RR_rates_iron[26,:]  = np.array([ 2.275E-09, 0.7481E+00, 1.836E+03, 4.736E+08, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[25,:]  = np.array([ 9.983E-10, 0.6754E+00, 6.651E+03, 4.017E+08, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[24,:]  = np.array([ 4.458E-10, 0.5802E+00, 2.155E+04, 1.701E+08, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[23,:]  = np.array([ 1.186E-09, 0.6713E+00, 3.253E+03, 9.392E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[22,:]  = np.array([ 3.322E-09, 0.7264E+00, 4.563E+02, 5.746E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[21,:]  = np.array([ 2.199E-09, 0.7118E+00, 7.810E+02, 5.946E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[20,:]  = np.array([ 1.659E-09, 0.6958E+00, 1.061E+03, 6.253E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[19,:]  = np.array([ 1.135E-09, 0.6705E+00, 1.691E+03, 6.809E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[18,:]  = np.array([ 7.556E-10, 0.6351E+00, 2.800E+03, 7.742E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[17,:]  = np.array([ 4.791E-10, 0.5823E+00, 4.967E+03, 9.535E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[16,:] = np.array([ 2.034E-10, 0.4548E+00, 1.751E+04, 1.579E+08, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[15,:] = np.array([ 3.133E-10, 0.5507E+00, 6.295E+03, 9.035E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[14,:] = np.array([ 5.398E-10, 0.6295E+00, 1.881E+03, 5.429E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[13,:] = np.array([ 1.121E-09, 0.6984E+00, 4.071E+02, 4.264E+07, 0.0000E+00, 0.000E+00 ])
RR_rates_iron[12,:] = np.array([ 1.984E-09, 0.7101E+00, 1.158E+02, 4.400E+07, 0.0000E+00, 0.000E+00 ]) 

###Dielectronic recombination rates
DR_rates_c_iron = np.zeros((27,9))
DR_rates_c_iron[26,:]   = np.array([ 0.000E+00, 0.000E+00,  0.000E+00, 0.000E+00,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[25,:]   = np.array([ 1.984E-01, 2.676E-01, -2.293E-03, 0.000E+00,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[24,:]   = np.array([ 2.676E-01, 4.097E-01,  2.990E-02, 0.000E+00,  0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[23,:]   = np.array([ 7.882E-03, 1.636E-02,  4.868E-02, 4.230E-02,  4.151E-01, 5.339E-01, 4.544E-03, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[22,:]   = np.array([ 2.325E-03, 1.017E-02,  3.572E-02, 9.882E-02,  1.156E-01, 5.792E-01, 3.344E-01, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[21,:]   = np.array([ 8.382E-03, 7.897E-03,  3.157E-02, 1.159E-01,  3.919E-01, 1.017E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[20,:]   = np.array([ 2.565E-03, 1.685E-02,  1.827E-02, 6.957E-02,  3.254E-01, 5.101E-01, 7.325E-01, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[19,:]   = np.array([ 2.106E-03, 6.569E-03,  1.532E-02, 3.799E-02,  7.669E-02, 6.701E-01, 1.298E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[18,:]   = np.array([ 2.033E-04, 1.159E-03,  5.567E-03, 5.482E-02,  3.370E-01, 1.518E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[17,:]   = np.array([ 8.207E-05, 2.766E-04,  1.897E-03, 2.842E-02,  4.022E-01, 1.434E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[16,:]  = np.array([ 6.342E-04, 8.350E-02,  1.045E+00, 3.663E-01, -3.955E-02, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[15,:]  = np.array([ 7.676E-04, 5.587E-03,  1.152E-01, 4.929E-02,  7.274E-01, 7.347E-03, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[14,:]  = np.array([ 5.636E-04, 7.860E-03,  5.063E-02, 1.753E-01,  1.209E-01, 1.934E-01, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[13,:]  = np.array([ 1.753E-03, 1.038E-02,  2.573E-02, 1.189E-01,  1.070E-01, 3.080E-02, 6.324E-04, 0.000E+00, 0.000E+00 ])
DR_rates_c_iron[12,:]  = np.array([ 4.469E-03, 8.538E-03,  1.741E-02, 1.630E-01,  8.680E-02, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])

DR_rates_e_iron = np.zeros((27,9))
DR_rates_e_iron[26,:]   = np.array([ 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[25,:]   = np.array([ 5.552E+07, 7.475E+07, 1.236E+08, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[24,:]   = np.array([ 5.394E+07, 6.854E+07, 9.651E+07, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[23,:]   = np.array([ 5.977E+04, 2.074E+05, 6.170E+05, 3.789E+06, 1.086E+07, 6.363E+07, 1.599E+08, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[22,:]   = np.array([ 1.376E+04, 8.251E+04, 2.794E+05, 9.378E+05, 4.688E+06, 1.106E+07, 6.543E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[21,:]   = np.array([ 5.297E+03, 5.829E+04, 2.454E+05, 9.663E+05, 5.580E+06, 1.110E+07, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[20,:]   = np.array([ 6.553E+03, 4.351E+04, 2.059E+05, 9.250E+05, 4.610E+06, 1.019E+07, 1.019E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[19,:]   = np.array([ 4.463E+03, 3.545E+04, 1.944E+05, 6.148E+05, 1.635E+06, 6.100E+06, 1.026E+07, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[18,:]   = np.array([ 3.502E+03, 3.557E+04, 2.177E+05, 1.078E+06, 4.515E+06, 9.050E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[17,:]   = np.array([ 6.365E+03, 3.842E+04, 2.002E+05, 1.150E+06, 4.736E+06, 8.891E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[16,:]  = np.array([ 2.770E+06, 3.978E+06, 7.052E+06, 1.300E+07, 3.579E+07, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[15,:]  = np.array([ 2.935E+04, 8.158E+04, 3.591E+05, 1.735E+06, 7.545E+06, 4.634E+07, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[14,:]  = np.array([ 3.628E+03, 2.489E+04, 1.405E+05, 5.133E+05, 5.018E+06, 8.689E+06, 0.000E+00, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[13,:]  = np.array([ 4.287E+03, 1.679E+04, 9.992E+04, 3.841E+05, 6.758E+05, 1.476E+06, 3.334E+08, 0.000E+00, 0.000E+00 ])
DR_rates_e_iron[12,:]  = np.array([ 2.462E+03, 1.261E+04, 9.330E+04, 4.887E+05, 1.312E+06, 0.000E+00, 0.000E+00, 0.000E+00, 0.000E+00 ])

###radiative recombination data from https://www.pa.uky.edu/~verner/rec.html
###The index number is the number of electons on the atom before the recombination process + 1
RR_rates_alt_iron = np.zeros((27,2))
RR_rates_alt_iron[1,:] = np.array([ 1.42E-13, 0.891E+00 ])
RR_rates_alt_iron[2,:] = np.array([ 1.02E-12, 0.843E+00 ])
RR_rates_alt_iron[3,:] = np.array([ 3.32E-12, 0.746E+00 ])
RR_rates_alt_iron[4,:] = np.array([ 7.80E-12, 0.682E+00 ])
RR_rates_alt_iron[5,:] = np.array([ 1.51E-11, 0.699E+00 ])
RR_rates_alt_iron[6,:] = np.array([ 2.62E-11, 0.728E+00 ])
RR_rates_alt_iron[7,:] = np.array([ 4.12E-11, 0.759E+00 ])
RR_rates_alt_iron[8,:] = np.array([ 6.05E-11, 0.790E+00 ])
RR_rates_alt_iron[9,:] = np.array([ 8.13E-11, 0.810E+00 ])
RR_rates_alt_iron[10,:] = np.array([ 1.09E-10, 0.829E+00 ])
RR_rates_alt_iron[11,:] = np.array([ 1.33E-10, 0.828E+00 ])
RR_rates_alt_iron[12,:] = np.array([ 1.64E-10, 0.834E+00 ])
RR_rates_alt_iron[13,:] = np.array([ 2.00E-10, 0.836E+00 ])
RR_rates_alt_iron[14,:] = np.array([ 2.41E-10, 0.840E+00 ])
RR_rates_alt_iron[15,:] = np.array([ 2.89E-10, 0.846E+00 ])
RR_rates_alt_iron[16,:] = np.array([ 3.42E-10, 0.850E+00 ])
RR_rates_alt_iron[17,:]  = np.array([ 3.87E-10, 0.836E+00 ])
RR_rates_alt_iron[18,:]  = np.array([ 4.52E-10, 0.824E+00 ])
RR_rates_alt_iron[19,:]  = np.array([ 5.25E-10, 0.816E+00 ])
RR_rates_alt_iron[20,:]  = np.array([ 6.07E-10, 0.811E+00 ])
RR_rates_alt_iron[21,:]  = np.array([ 6.98E-10, 0.808E+00 ])
RR_rates_alt_iron[22,:]  = np.array([ 7.72E-10, 0.800E+00 ])
RR_rates_alt_iron[23,:]  = np.array([ 1.15E-09, 0.852E+00 ])
RR_rates_alt_iron[24,:]  = np.array([ 1.58E-09, 0.875E+00 ])
RR_rates_alt_iron[25,:]  = np.array([ 1.40E-09, 0.787E+00 ])

DR_rates_alt_iron = np.zeros((27,8)) 
DR_rates_alt_iron[1,:] = np.array([ 5.120E+00, 1.29E+01, 0.00E+00, 0.00E+00, 2.20E-04, 1.00E-04, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[2,:] = np.array([ 1.670E+01, 3.14E+01, 0.00E+00, 0.00E+00, 2.30E-03, 2.70E-03, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[3,:] = np.array([ 2.860E+01, 5.21E+01, 0.00E+00, 0.00E+00, 1.50E-02, 4.70E-03, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[4,:] = np.array([ 3.730E+01, 6.74E+01, 0.00E+00, 0.00E+00, 3.80E-02, 1.60E-02, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[5,:] = np.array([ 5.420E+01, 1.00E+02, 0.00E+00, 0.00E+00, 8.00E-02, 2.40E-02, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[6,:] = np.array([ 4.550E+01, 3.60E+02, 0.00E+00, 0.00E+00, 9.20E-02, 4.10E-02, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[7,:] = np.array([ 6.670E+01, 1.23E+02, 0.00E+00, 0.00E+00, 1.60E-01, 3.60E-02, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[8,:] = np.array([ 6.610E+01, 1.29E+02, 0.00E+00, 0.00E+00, 1.80E-01, 7.00E-02, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[9,:] = np.array([ 2.160E+01, 1.36E+02, 0.00E+00, 0.00E+00, 1.40E-01, 2.60E-01, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[10,:] = np.array([ 2.220E+01, 1.44E+02, 0.00E+00, 0.00E+00, 1.00E-01, 2.80E-01, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[11,:] = np.array([ 5.960E+01, 3.62E+02, 0.00E+00, 0.00E+00, 2.25E-01, 2.31E-01, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[12,:] = np.array([ 7.500E+01, 2.05E+02, 0.00E+00, 0.00E+00, 2.40E-01, 1.70E-01, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[13,:] = np.array([ 3.630E+01, 1.93E+02, 0.00E+00, 0.00E+00, 2.60E-01, 1.60E-01, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[14,:] = np.array([ 3.940E+01, 1.98E+02, 0.00E+00, 0.00E+00, 1.90E-01, 9.00E-02, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[15,:] = np.array([ 2.460E+01, 2.48E+02, 5.60E+02, 0.00E+00, 1.20E-01, 1.20E-01, 6.00E-01, 0.00E+00 ])
DR_rates_alt_iron[16,:] = np.array([ 5.600E+02, 0.00E+00, 0.00E+00, 0.00E+00, 1.23E+00, 0.00E+00, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[17,:]  = np.array([ 2.250E+01, 1.17E+02, 3.41E+02, 6.83E+02, 2.53E-03, 3.36E-02, 1.81E-01, 1.92E+00 ])
DR_rates_alt_iron[18,:]  = np.array([ 1.620E+01, 9.60E+01, 3.30E+02, 7.29E+02, 5.67E-03, 7.82E-02, 3.18E-02, 1.26E+00 ])
DR_rates_alt_iron[19,:]  = np.array([ 2.370E+01, 8.51E+01, 3.29E+02, 7.87E+02, 1.60E-02, 7.17E-02, 9.06E-02, 7.39E-01 ])
DR_rates_alt_iron[20,:]  = np.array([ 1.320E+01, 6.66E+01, 2.97E+02, 7.14E+02, 1.85E-02, 9.53E-02, 7.90E-02, 1.23E+00 ])
DR_rates_alt_iron[21,:]  = np.array([ 3.910E+01, 8.03E+01, 3.92E+02, 9.19E+02, 9.20E-04, 1.29E-01, 1.92E-01, 9.12E-01 ])
DR_rates_alt_iron[22,:]  = np.array([ 7.320E+01, 3.16E+02, 8.77E+02, 0.00E+00, 1.31E-01, 8.49E-02, 6.13E-01, 0.00E+00 ])
DR_rates_alt_iron[23,:]  = np.array([ 1.000E-01, 3.62E+01, 3.06E+02, 9.28E+02, 1.10E-02, 4.88E-02, 8.01E-02, 5.29E-01 ])
DR_rates_alt_iron[24,:]  = np.array([ 4.625E+03, 6.00E+03, 0.00E+00, 0.00E+00, 2.56E-01, 4.52E-01, 0.00E+00, 0.00E+00 ])
DR_rates_alt_iron[25,:]  = np.array([ 5.300E+03, 0.00E+00, 0.00E+00, 0.00E+00, 4.30E-01, 0.00E+00, 0.00E+00, 0.00E+00 ])

###
### Neon
###
###Radiative recombination rates
RR_rates_neon = np.zeros((11,6))
RR_rates_neon[10,:]  = np.array([ 8.278E-10,  0.7470E+00,  2.991E+02,  7.006E+07,  0.0000E+00,  0.000E+00 ])
RR_rates_neon[9,:]  = np.array([ 3.415E-10,  0.6706E+00,  9.552E+02,  6.778E+07,  0.0000E+00,  0.000E+00 ])
RR_rates_neon[8,:]  = np.array([ 1.186E-10,  0.5354E+00,  3.647E+03,  3.365E+07,  0.0000E+00,  0.000E+00 ])
RR_rates_neon[7,:]  = np.array([ 2.755E-10,  0.6586E+00,  5.102E+02,  1.535E+07,  0.0000E+00,  0.000E+00 ])
RR_rates_neon[6,:]  = np.array([ 2.557E-09,  0.7601E+00,  6.293E+00,  8.091E+06,  0.0000E+00,  0.000E+00 ])
RR_rates_neon[5,:]  = np.array([ 1.127E-09,  0.7556E+00,  1.311E+01,  8.047E+06,  0.0250E+00,  2.771E+05 ])
RR_rates_neon[4,:]  = np.array([ 1.861E-09,  0.7593E+00,  2.504E+00,  8.037E+06,  0.0406E+00,  3.255E+05 ])
RR_rates_neon[3,:]  = np.array([ 8.321E-10,  0.7254E+00,  3.332E+00,  8.696E+06,  0.0921E+00,  3.044E+05 ])
RR_rates_neon[2,:]  = np.array([ 1.773E-10,  0.6434E+00,  9.924E+00,  8.878E+06,  0.2205E+00,  2.292E+05 ])
RR_rates_neon[1,:]  = np.array([ 1.295E-11,  0.3556E+00,  6.739E+01,  7.563E+06,  0.6472E+00,  1.598E+05 ])

###Dielectronic recombination rates
DR_rates_c_neon = np.zeros((11,9))
DR_rates_c_neon[10,:]   = np.array([ 0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[9,:]   = np.array([ 1.183E-02,  9.011E-02,  1.828E-03,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[8,:]   = np.array([ 1.552E-02,  9.008E-02,  1.182E-02,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[7,:]   = np.array([ 2.399E-04,  3.532E-04,  8.928E-03,  5.427E-03,  5.342E-03,  3.981E-02,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[6,:]   = np.array([ 8.460E-05,  1.817E-04,  1.176E-03,  1.397E-02,  5.566E-03,  6.229E-03,  1.031E-02,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[5,:]   = np.array([ 5.653E-06,  4.344E-05,  1.086E-04,  5.980E-04,  1.457E-02,  1.601E-02,  5.365E-04,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[4,:]   = np.array([ 2.922E-06,  7.144E-06,  2.836E-05,  9.820E-05,  8.379E-03,  1.009E-02,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[3,:]   = np.array([ 2.763E-06,  1.053E-05,  4.453E-05,  6.244E-03,  3.146E-04,  4.465E-03,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[2,:]   = np.array([ 2.980E-08,  1.257E-07,  1.122E-06,  2.626E-03,  8.802E-04,  1.231E+00,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_c_neon[1,:]   = np.array([ 4.152E-09,  4.656E-09,  1.310E-08,  1.417E-09,  7.968E-04,  1.271E-05,  0.000E+00,  0.000E+00,  0.000E+00 ])

DR_rates_e_neon = np.zeros((11,9))
DR_rates_e_neon[10,:]   = np.array([ 0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[9,:]   = np.array([ 8.405E+06,  1.111E+07,  1.812E+07,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[8,:]   = np.array([ 7.845E+06,  9.803E+06,  1.209E+07,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[7,:]   = np.array([ 2.536E+04,  4.800E+04,  1.770E+05,  1.030E+06,  1.859E+06,  9.743E+06,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[6,:]   = np.array([ 1.049E+03,  3.829E+03,  6.133E+04,  2.568E+05,  4.600E+05,  1.324E+06,  9.353E+06,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[5,:]   = np.array([ 6.280E+02,  2.812E+03,  1.324E+04,  8.064E+04,  3.052E+05,  1.032E+06,  2.388E+06,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[4,:]   = np.array([ 2.050E+02,  2.205E+03,  9.271E+03,  4.988E+04,  2.904E+05,  8.782E+05,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[3,:]   = np.array([ 6.393E+02,  1.499E+03,  3.227E+04,  2.561E+05,  4.505E+05,  7.934E+05,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[2,:]   = np.array([ 4.579E+01,  4.753E+02,  1.481E+04,  2.810E+05,  4.763E+05,  4.677E+08,  0.000E+00,  0.000E+00,  0.000E+00 ])
DR_rates_e_neon[1,:]   = np.array([ 2.689E+01,  2.021E+02,  7.200E+02,  4.892E+04,  3.144E+05,  6.738E+05,  0.000E+00,  0.000E+00,  0.000E+00 ])


"""
Functions for computing the recombination rates
"""

def alpha_RR(T, A, B, T0, T1, C, T2):
    #HK NOTE: in many cases C and T2 are 0 so B = B
    B = B + (C * np.exp(-T2/T))

    a0 = np.sqrt(T / T0)
    a1 = (1. + np.sqrt(T / T0))**(1. - B)
    a2 = ((1. + np.sqrt(T / T1))**(1. + B))

    return A/(a0 * a1 * a2)

def alpha_DR(T,idx,DR_rates_e,DR_rates_c):
    # ! Dielectronic recombination
    # ! T**(-3/2) * sum c_i * exp(-E_i/T)
    comp_Alpha = 0.0
    for i in range(9):
        if (DR_rates_e[idx,i] > 0.0): 
            comp_Alpha += ( (T**(-3./2.)) * DR_rates_c[idx,i] * np.exp(-1. * DR_rates_e[idx,i] / T) )
    return comp_Alpha

# METAL ION RECOMBINATION RATES
def recombination_carbon(T, idx):
    # ! Returns the recombination rate [cm^3 s-1]
    # ! Taken from https://arxiv.org/pdf/astro-ph/0604144.pdf
    # ! idx is the number of electrons on the ion before recombination

    #! Radiative recombination
    A, B, T0, T1, C, T2 = RR_rates_carbon[idx,:]

    rec_rate = alpha_RR(T, A, B, T0, T1, C, T2)
    
    # ! Dielectronic recombination
    rec_rate += alpha_DR(T,idx,DR_rates_e_carbon,DR_rates_c_carbon)

    return rec_rate

def recombination_nitrogen(T, idx):
    # ! Returns the recombination rate [cm^3 s-1]
    # ! Taken from https://arxiv.org/pdf/astro-ph/0604144.pdf
    # ! idx is the number of electrons on the ion before recombination

    #! Radiative recombination
    A, B, T0, T1, C, T2 = RR_rates_nitrogen[idx,:]

    rec_rate = alpha_RR(T, A, B, T0, T1, C, T2)

    # ! Dielectronic recombination
    rec_rate += alpha_DR(T,idx,DR_rates_e_nitrogen,DR_rates_c_nitrogen)

    return rec_rate

def recombination_oxygen(T, idx):
    # ! Returns the recombination rate [cm^3 s-1]
    # ! Taken from https://arxiv.org/pdf/astro-ph/0604144.pdf
    # ! idx is the number of electrons on the ion before recombination

    #! Radiative recombination
    A, B, T0, T1, C, T2 = RR_rates_oxygen[idx,:]

    rec_rate = alpha_RR(T, A, B, T0, T1, C, T2)

    # ! Dielectronic recombination
    rec_rate += alpha_DR(T,idx,DR_rates_e_oxygen,DR_rates_c_oxygen)

    return rec_rate

def recombination_neon(T, idx):
    # ! Returns the recombination rate [cm^3 s-1]
    # ! Taken from https://arxiv.org/pdf/astro-ph/0604144.pdf
    # ! idx is the number of electrons on the ion before recombination

    #! Radiative recombination
    A, B, T0, T1, C, T2 = RR_rates_neon[idx,:]

    rec_rate = alpha_RR(T, A, B, T0, T1, C, T2)

    # ! Dielectronic recombination
    rec_rate += alpha_DR(T,idx,DR_rates_e_neon,DR_rates_c_neon)

    return rec_rate

def recombination_magnesium(T, idx):
    # ! Returns the recombination rate [cm^3 s-1]
    # ! Taken from https://arxiv.org/pdf/astro-ph/0604144.pdf
    # ! idx is the number of electrons on the ion before recombination

    #! Radiative recombination
    A, B, T0, T1, C, T2 = RR_rates_magnesium[idx,:]

    rec_rate = alpha_RR(T, A, B, T0, T1, C, T2)

    # ! Dielectronic recombination
    rec_rate += alpha_DR(T,idx,DR_rates_e_magnesium,DR_rates_c_magnesium)

    return rec_rate

def recombination_silicon(T, idx):
    # ! Returns the recombination rate [cm^3 s-1]
    # ! Taken from https://arxiv.org/pdf/astro-ph/0604144.pdf
    # ! idx is the number of electrons on the ion before recombination

    #! Radiative recombination
    A, B, T0, T1, C, T2 = RR_rates_silicon[idx,:]

    rec_rate = alpha_RR(T, A, B, T0, T1, C, T2)

    # ! Dielectronic recombination
    rec_rate += alpha_DR(T,idx,DR_rates_e_silicon,DR_rates_c_silicon)

    return rec_rate

def recombination_sulfur(T, idx):
    # ! Returns the recombination rate [cm^3 s-1]
    # ! Taken from https://arxiv.org/pdf/astro-ph/0604144.pdf
    # ! idx is the number of electrons on the ion before recombination

    if (idx >= 2):
        #! Radiative recombination
        A, B, T0, T1, C, T2 = RR_rates_sulfur[idx,:]

        rec_rate = alpha_RR(T, A, B, T0, T1, C, T2)

        # ! Dielectronic recombination
        rec_rate += alpha_DR(T,idx,DR_rates_e_sulfur,DR_rates_c_sulfur)
    else:

        A,B = RR_rates_alt_sulfur[idx,:]
        rec_rate = A * ( ( T / 1.0E4 )**( -1.E0 * B )) 

        A,B,T0,T1  = DR_rates_alt_sulfur[idx,:]
        rec_rate += ( A * ( T**-1.5E0 ) * np.exp( -1.0 * T0 / T ) * ( 1.0 + B * np.exp( -1.0 * T1 / T ) ) )

    return rec_rate

def recombination_iron(T, idx):
    # ! Returns the recombination rate [cm^3 s-1]
    # ! Taken from https://arxiv.org/pdf/astro-ph/0604144.pdf
    # ! idx is the number of electrons on the ion before recombination

    if (idx >= 12):
        #! Radiative recombination
        A, B, T0, T1, C, T2 = RR_rates_iron[idx,:]

        rec_rate = alpha_RR(T, A, B, T0, T1, C, T2)

        # ! Dielectronic recombination
        rec_rate += alpha_DR(T,idx,DR_rates_e_iron,DR_rates_c_iron)
    else:

        A,B = RR_rates_alt_iron[idx,:]
        rec_rate = A * ( ( T / 1.0E4 )**( -1.E0 * B )) 

        for i in range(4):
            rec_rate += ( (T**-1.5) * ( DR_rates_alt_iron[idx,i+4] * np.exp( -1. * DR_rates_alt_iron[idx,i]/( 8.617333262145E-5 * T ) ) ) )

    return rec_rate

def recombination_hydrogen(T, idx):
    #! Case B rec. coefficient [cm3 s-1] for HII (Hui&Gnedin'97)-------------
    lam = 315614. / T
    f = 1.0 + (lam/2.74)**0.407
    rec_rate = 2.753e-14 * (lam**1.5) / (f**2.242)
    return rec_rate

def recombination_helium(T, idx):
    rec_rate = 0.0
    if idx == 1:
        #! Case B rec. coefficient [cm3 s-1] for HeII (Hui&Gnedin'97)------------
        lam = 570670. / T
        rec_rate = 1.26e-14 * (lam**0.75)
    elif idx == 2:
        lam = 1263030. / T
        f = 1.0 + (lam/2.74)**0.407
        rec_rate = 5.506e-14 * (lam**1.5) / (f**2.242)
    return rec_rate

